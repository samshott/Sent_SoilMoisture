size = 12))
vol_gg_bar <- ggplot(cts_table_Complete, aes(x = Den.Volume.in3,
fill = SppGroups)) +
scale_x_continuous(limits = c(0,200)) +
geom_histogram(stat = 'bin', alpha = 0.8, binwidth = 10) +
theme(legend.position = "left") +
labs(fill = "Species Group",
x = "Den Volume (Cubic Inches)",
y = "Number of Observations")
vol_gg_dense <- ggplot(cts_table_Complete,
aes(x = Den.Volume.in3,
color = SppGroups,
fill = SppGroups),
alpha = 0.2) +
scale_x_continuous(limits = c(0, 200)) +
theme(legend.position = "left") +
labs(color = "Species Group",
x = "Den Volume (Cubic Inches)",
y = "Density of Observations") +
geom_density(alpha = 0.2,
size = 1.5,) +
theme(legend.position = "none")
vol_gg_vio <- vol_gg +
scale_y_continuous(limits = c(0, 200)) +
geom_violin(alpha = 0.7) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 30,
vjust = 0.5,
size = 12))
grid.arrange(vol_gg_bar, vol_gg_dense, vol_gg_box,vol_gg_vio,  ncol=2)
denEntranceData <- cts_table_Complete %>%
select(Den.Entrances,
SppGroups,
Depth.at.Deepest.Point...ft.,
Diameter.Largest.Entrance..in.,
Den.Volume.in3) %>%
mutate(Den.Entrances = as.numeric(Den.Entrances)) %>%
filter( !is.na(Den.Entrances)
& Den.Entrances != "0") %>%
mutate(Den.Entrances = as.numeric(Den.Entrances))
num_ent_plot <- ggplot(denEntranceData, aes(x = Den.Entrances,
fill = SppGroups,)) +
labs(fill = "Species Group",
x = "Number of Den Entrances",
y = "Number of Observations") +
geom_bar(alpha = 0.7) +
theme(axis.title = element_text(size = 13))
denEntrance_ggridge <- ggplot(denEntranceData,
aes(x = Den.Entrances,
y = SppGroups,
fill = SppGroups,
color = SppGroups)) +
labs(fill = "Species Group",
x = "Number of Den Entrances",
y = "Density of Observations") +
geom_density_ridges2(alpha = 0.7, size = 1.5) +
scale_x_binned(breaks = 1:8) +
theme(legend.position = "none",
axis.title = element_text(size = 13))
# denEntrance_ggridge
# num_ent_plot
grid.arrange(denEntrance_ggridge, num_ent_plot,  ncol=1)
crdref <- "+proj=utm +zone=10 +ellps=WGS84 +datum=WGS84 +units=m +no_defs" #proj4 info for UTM Zone 10
Den_Locations <- vect(cbind(cts_table_Complete$X_UTMZ10,
cts_table_Complete$Y_UTMZ10),
atts = cts_table_Complete,
crs = crdref) #create a SpatVector object of the points
sf_Den_loc <- sf::st_as_sf(Den_Locations)
colnames(sf_Den_loc)[c(4:7,29,32:34)] <- c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)",
"Den Volume (cubic ft)")
sf_Den_loc %<>% select(`Species Found`,
`Species Group`,
`Number of Entrances`,
`Largest Entrance Diameter (in)`,
`Depth at Deepest Point (ft)`,
`Total Lenght (ft)`,
`Den Volume (cubic in)`,
Notes)
colPal <- colorFactor(palette = c("#000000", brewer.pal(4,"Set1")),
levels = sf_Den_loc$`Species Group`)
#create sf object compatible with mapview
webmapCTS <- mapview(sf_Den_loc,
zcol = "Species Group",
map.type = "Esri.WorldImagery",
layer.name = "Species Group",
col.regions = c("#FDE725FF", "#5DC863FF", "#21908CFF", "#FF000000", "#440154FF"),
popup = popupTable(
x = sf_Den_loc,
zcol = c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)"),
feature.id = FALSE,
row.numbers = FALSE))
webmapCTS
#mapshot(webmapCTS, url = "~/R/AlthouseAndMeade/CTS_Data/WebMap/CTSmap.html")
raster_ndmis_paths <- c("C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2A2A_20210126_070_LagunaLake_NDMI_10.tif",
"C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2B2A_20210210_070_LagunaLake_NDMI_10.tif",
"C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2A2A_20210225_070_LagunaLake_NDMI_10.tif")
rast1 <- raster(raster_ndmis_paths[1]) #create a raster object from one path
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
?gsub
daterange <- gsub("-", paste0(timeframe_begin,timeframe_end), replacement = "")
daterange
daterange <- gsub(pattern = "-",
paste(timeframe_begin,
timeframe_end,
sep = "_"),
replacement = "")
daterange
filename <- paste0("LagunaMoistureCumm_", daterange)
filename
library(terra)
library(raster)
?raster::writeRaster
writeFormats()
writeFormats()[24]
cumm_moisture_func <- function(path_list){
#' read in all rasters in a list
#' convert them to SpatRaster objects
#' Append them to a list
#' Return SpatRaster list
raster_vect <- c()
for (path in path_list){
i_rast <- rast(path)
raster_vect <- append(raster_vect, (i_rast))
}
return(raster_vect)
}
cummulative_moisture <- raster(sum(cumm_moisture_func(c(raster_ndmis_paths)), na.rm = TRUE)) #Raster algebra - add all rasters together
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_", tmpdir = tempDir) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_", tmpdir = tempDir)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
proj = webmercProj,
overwrite = TRUE
)
crs(Laguna_Ext)
crs(read_sf(Laguna_file_name))
out_paths <- sen2r(
gui = FALSE,
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages(c("sen2r","terra","leaflet","sf","raster","RColorBrewer"))
library(terra)
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
install_aria2(\)
install_aria2()
install_aria2(file.choose())
install_aria2(choose.dir())
?sen2r
# google cloud project ID "Sen2"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_"#,
#tmpdir = tempDir
) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_"#,
#tmpdir = tempDir
)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
out_paths <- sen2r(
gui = FALSE,
#downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
'out_paths <- sen2r(
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
d
)
-
---
___
)))
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages("geojsonlint")
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
s2_tiles()
?s2_tiles
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
# google cloud project ID "Sen2"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_"#,
#tmpdir = tempDir
) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_"#,
#tmpdir = tempDir
)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages("sen2r")
install.packages("sen2r")
library(sen2r)
s2_tiles()
s2_tiles_rds()
# google cloud project ID "Sen2"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_"#,
#tmpdir = tempDir
) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_"#,
#tmpdir = tempDir
)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
?readRDS
s2_tiles()
