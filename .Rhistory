"Species Found",
"Species Group",
"Den Volume (cubic in)",
"Den Volume (cubic ft)")
sf_Den_loc %<>% select(`Species Found`,
`Species Group`,
`Number of Entrances`,
`Largest Entrance Diameter (in)`,
`Depth at Deepest Point (ft)`,
`Total Lenght (ft)`,
`Den Volume (cubic in)`,
Notes)
colPal <- colorFactor(palette = c("#000000", brewer.pal(4,"Set1")),
levels = sf_Den_loc$`Species Group`)
#create sf object compatible with mapview
webmapCTS <- mapview(sf_Den_loc,
zcol = "Species Group",
map.type = "Esri.WorldImagery",
layer.name = "Species Group",
col.regions = c("#FDE725FF", "#5DC863FF", "#21908CFF", "#FF000000", "#440154FF"),
popup = popupTable(
x = sf_Den_loc,
zcol = c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)"),
feature.id = FALSE,
row.numbers = FALSE))
webmapCTS
#mapshot(webmapCTS, url = "~/R/AlthouseAndMeade/CTS_Data/WebMap/CTSmap.html")
raster_ndmis_paths <- c("C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2A2A_20210126_070_LagunaLake_NDMI_10.tif",
"C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2B2A_20210210_070_LagunaLake_NDMI_10.tif",
"C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2A2A_20210225_070_LagunaLake_NDMI_10.tif")
rast1 <- raster(raster_ndmis_paths[1]) #create a raster object from one path
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
?gsub
daterange <- gsub("-", paste0(timeframe_begin,timeframe_end), replacement = "")
daterange
daterange <- gsub(pattern = "-",
paste(timeframe_begin,
timeframe_end,
sep = "_"),
replacement = "")
daterange
filename <- paste0("LagunaMoistureCumm_", daterange)
filename
library(terra)
library(raster)
?raster::writeRaster
writeFormats()
writeFormats()[24]
cumm_moisture_func <- function(path_list){
#' read in all rasters in a list
#' convert them to SpatRaster objects
#' Append them to a list
#' Return SpatRaster list
raster_vect <- c()
for (path in path_list){
i_rast <- rast(path)
raster_vect <- append(raster_vect, (i_rast))
}
return(raster_vect)
}
cummulative_moisture <- raster(sum(cumm_moisture_func(c(raster_ndmis_paths)), na.rm = TRUE)) #Raster algebra - add all rasters together
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_", tmpdir = tempDir) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_", tmpdir = tempDir)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
proj = webmercProj,
overwrite = TRUE
)
crs(Laguna_Ext)
crs(read_sf(Laguna_file_name))
out_paths <- sen2r(
gui = FALSE,
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages(c("sen2r","terra","leaflet","sf","raster","RColorBrewer"))
library(terra)
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
install_aria2(\)
install_aria2()
install_aria2(file.choose())
install_aria2(choose.dir())
?sen2r
# google cloud project ID "Sen2"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_"#,
#tmpdir = tempDir
) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_"#,
#tmpdir = tempDir
)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
out_paths <- sen2r(
gui = FALSE,
#downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
'out_paths <- sen2r(
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
d
)
-
---
___
)))
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages("geojsonlint")
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
s2_tiles()
?s2_tiles
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
# google cloud project ID "Sen2"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_"#,
#tmpdir = tempDir
) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_"#,
#tmpdir = tempDir
)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages("sen2r")
install.packages("sen2r")
library(sen2r)
s2_tiles()
s2_tiles_rds()
# google cloud project ID "Sen2"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_"#,
#tmpdir = tempDir
) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_"#,
#tmpdir = tempDir
)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
downloader = "aria2",
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin),
as.Date(timeframe_end)),
list_indices = c("NDMI"),
#rm_safe = TRUE,
# overwrite_safe = TRUE,
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
?readRDS
s2_tiles()
library(h3) #aggrigation on Ubers H3 hexagon grid
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
rast_path_list <- c(choose.files())
cumm_moisture_func <- function(path_list){
#' read in all rasters in a list
#' convert them to SpatRaster objects
#' Append them to a list
#' Return SpatRaster list
raster_vect <- c()
for (path in path_list){
i_rast <- rast(path)
raster_vect <- append(raster_vect, (i_rast))
}
return(raster_vect)
}
cummulative_moisture <- raster(sum(cumm_moisture_func(c(rast_path_list)), na.rm = TRUE))
writeRaster(cummulative_moisture, "cummulative_moisture_example", writeFormats()[24])
rast_path <- file.choose() #find and select raster, create char vector of path to raster
webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs" # crs from previous exercise
#
cummulative_moisture <- terra::rast(rast_path) #read in raster from path from previous exercise
library(dplyr)
?st_as_sf
laguna_file <- "Laguna_Ext.GeoJSON"
laguna_Ext <- read_sf(laguna_file)
crs(laguna_Ext)
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
leaflet(st_as_sf(laguna_Ext)) %>%
addTiles() %>%
addPolygons()
leaflet(laguna_Ext) %>%
addTiles() %>%
addPolygons()
leaflet(st_as_sf(laguna_Ext)) %>%
addTiles() %>%
addPolygons()
geo_to_h3(laguna_Ext, res = 12)
laguna_h3 %<>%
geo_to_h3(laguna_Ext) %>%
h3_to_geo_boundary_sf()
laguna_h3 <-
geo_to_h3(laguna_Ext) %>%
h3_to_geo_boundary_sf()
leaflet(laguna_h3) %>%
addTiles() %>%
addPolygons()
laguna_h3 <-
geo_to_h3(laguna_Ext, res = 12) %>%
h3_to_geo_boundary_sf()
leaflet(laguna_h3) %>%
addTiles() %>%
addPolygons()
?geo_to_h3.sf
laguna_h3 <-
geo_to_h3(laguna_Ext) %>%
h3_to_children(res = 12) %>%
h3_to_geo_boundary_sf()
leaflet(laguna_h3) %>%
addTiles() %>%
addPolygons()
plot(laguna_h3)
laguna_h3 <-
geo_to_h3(laguna_Ext) %>%
h3_to_children(res = 12) %>%
h3_to_geo_boundary_sf()
View(laguna_h3)
