crs = crdref) #create a SpatVector object of the points
sf_Den_loc <- sf::st_as_sf(Den_Locations)
colnames(sf_Den_loc)[c(4:7,29,32:34)] <- c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)",
"Den Volume (cubic ft)")
sf_Den_loc %<>% select(`Species Found`,
`Species Group`,
`Number of Entrances`,
`Largest Entrance Diameter (in)`,
`Depth at Deepest Point (ft)`,
`Total Lenght (ft)`,
`Den Volume (cubic in)`,
Notes)
colPal <- colorFactor(palette = c("#000000", brewer.pal(4,"Set1")),
levels = sf_Den_loc$`Species Group`)
#create sf object compatible with mapview
webmapCTS <- mapview(sf_Den_loc,
zcol = "Species Group",
map.type = "Esri.WorldImagery",
layer.name = "Species Group",
col.regions = c("#FDE725FF", "#5DC863FF", "#21908CFF", "#FF000000", "#440154FF"),
popup = popupTable(
x = sf_Den_loc,
zcol = c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)"),
feature.id = FALSE,
row.numbers = FALSE))
webmapCTS
#mapshot(webmapCTS, url = "~/R/AlthouseAndMeade/CTS_Data/WebMap/CTSmap.html")
#create a new column for the Hexigon's ID
den_Locations <- cts_table_Complete %>%
mutate(h3_ind =
geo_to_h3(c(as.numeric(Y_GPS), as.numeric(X_GPS)), res = 12))
#change the column names for better viewing in popups
colnames(den_Locations)[c(4:7,29,32:35)] <- c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)",
"Den Volume (cubic ft)",
"H3 Index")
#keep only necessary columns, dplyr::select() could also be used for this
den_Locations_Small <- den_Locations[c(4:7,29,32:35)] %>%
mutate(`Species Found` =
ifelse(`Species Found` == "Krat"
| `Species Found` == "Heermann's Kangaroo Rat",
"Kangaroo Rat",
`Species Found`),
`Number of Entrances` = as.numeric(`Number of Entrances`))#change number of entrances to numeric for future calculations
den_Locations_H3 <- den_Locations_Small %>%
group_by(`H3 Index`) %>% #group all information by the hexagonal indices for summarization
summarise( #summarise each statistic within its hexagon
`Total Occurances` = n(),
`No Species Count` = sum(`Species Group` == "None"),
`Arachnid Count` =  sum(`Species Group` == "Arachnids"),
`Herptile (excl. CTS) Count` =  sum(`Species Group` == "Herptiles (excl. CTS)"),
`Kangaroo Rat Count` =  sum(`Species Group` == "Kangaroo Rat"),
`Rodent Count` = sum(`Species Group` == "Rodents"),
`Average Diameter (in)` = round(mean(`Largest Entrance Diameter (in)`), 2),
`Average Depth (ft)` = round(mean(`Depth at Deepest Point (ft)`), 2),
`Average Number of Entrances` = round(mean(`Number of Entrances`, na.rm = TRUE), 2),
`Average Den Volume (cubic in)` = round(mean(`Den Volume (cubic in)`), 2),
`Average Length (ft)` = round(mean(`Total Lenght (ft)`), 2),
`Unique Species Found` = paste(unique(`Species Found`), collapse = ", ")
)
#Now a column just for the geometry is created
den_Loc_H3_sf <- h3_to_geo_boundary_sf(den_Locations_H3$`H3 Index`) %>%
cbind(den_Locations_H3[2:13])
center_coord <- c(mean(st_coordinates(den_Loc_H3_sf)[,1]),
mean(st_coordinates(den_Loc_H3_sf)[,2]))
pal <- RColorBrewer::brewer.pal(11, "YlOrRd")
names(den_Loc_H3_sf) <- c(colnames(den_Locations_H3)[2:13], "geometry")
webmapH3 <- mapview(den_Loc_H3_sf,
map.type = "Esri.WorldImagery",
zcol = "Total Occurances",
layer.name = "Total Occurances",
col.regions = pal,
alpha.regions = 0.7)
webmapH3@map %<>%
setView(lng = center_coord[1],
lat = center_coord[2],
zoom = 16)
webmapH3
#mapshot(webmapH3, url = "~/R/AlthouseAndMeade/CTS_Data/WebMap/CTSmapH3.html")
cts_table %<>%
mutate(Burrow.Species = "None")  #Fill with "None" as we want this to be the default
cts_table %>% count(Burrow.Species, sort = TRUE) # Keep a rolling tally of number of each species.  "None"s should only decrease as we go on.
cts_table %<>%
mutate(
Burrow.Species =
ifelse(
Burrow.Creator != "Other"
& Burrow.Creator!= "",
Burrow.Creator,
Burrow.Species)
) %>%
mutate(
Burrow.Species =
ifelse(
Species.Observed != "Other"
& Species.Observed != "None"
& Species.Observed != ""
& Species.Observed != "Unknown",
Species.Observed,
Burrow.Species
)
)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
setwd("C:/Users/samer/OneDrive/Documents/R/AlthouseAndMeade/CTS_Data") #choose.dir() for more universal
library(magrittr)
library(xlsx) #read in excel files
library(ggplot2) #visualization and graphing
library(ggridges) #plugin for ggplot2 ridgeline plots
library(gridExtra) #For plot arrangment
library(grid) #more plot arrangment stuff
library(stringi) #regex and string manipulation
library(dplyr) #data orginization, piping, data manipulation
library(terra) #for geometry export
library(sf) #convert SpatVect objects to sf for mapping
library(mapview) #easy leaflet API
library(sp)
library(leaflet) #interactive leaflet maps
library(leafpop) #leaflet popup settings and config
library(RColorBrewer) #for additional color pallets
library(h3) #uber H3 for heatmapping
cts_table <- read.xlsx2("CTSdata.xlsx", sheetIndex = 2)
head(cts_table[1:8])#see what the data looks like, did column names transfer over okay?
knitr::kable(head(cts_table[1:8]))
cts_table %<>%
mutate(Den.Species = "None")  #Fill with "None" as we want this to be the default
cts_table %>% count(Den.Species, sort = TRUE) # Keep a rolling tally of number of each species.  "None"s should only decrease as we go on.
cts_table %<>%
mutate(
Den.Species =
ifelse(
Den.Creator != "Other"
& Den.Creator!= "",
Den.Creator,
Den.Species)
) %>%
mutate(
Den.Species =
ifelse(
Species.Observed != "Other"
& Species.Observed != "None"
& Species.Observed != ""
& Species.Observed != "Unknown",
Species.Observed,
Den.Species
)
)
cts_table %>% count(Den.Species, sort = TRUE)
unique(cts_table$Den.Species)
spp_list <- c(unique(cts_table$Den.Species))
spp_pattern <- paste(tolower(spp_list), collapse = "|") #to lower case to normalize characters
cts_table %<>%
mutate(notes_lower = tolower(Notes)) %>% #create a column of lowercase notes for better matching
mutate(note_spp =
ifelse(
stri_detect_regex(
notes_lower,
spp_pattern
), #if one of the pattern words is found in the notes return TRUE
stri_extract(
notes_lower,
regex = spp_pattern
), #if TRUE, return the detected word
"--"))
#check for double observations
cts_table %>%
filter(Den.Species!="None" & note_spp!="--") %>%
select(c(Den.Species,note_spp))
cts_table %<>%
mutate(
Den.Species = ifelse(
Den.Species == "None"
& note_spp != "--"
& note_spp != "none",
note_spp,
Den.Species
)
)
cts_table %>% count(Den.Species, sort = TRUE) #Check our "None" Rolling Tally - Previous 2261
cts_table %<>%
mutate(
Den.Species =
stri_trans_totitle(Den.Species)
)
cts_table %>% count(Den.Species, sort = TRUE)
cts_table %<>%
mutate(SppGroups =
if_else(
Den.Species %in%
c("Kangaroo Rat",
"Krat",
"Heermann's Kangaroo Rat",
"Heerman's Kangaroo Rat"),
"Kangaroo Rat",
ifelse(
Den.Species %in%
c("Squirrel",
"Gopher",
"California Ground Squirrel ",
"Deer Mouse",
"Pocket Mouse",
"Pocket Gopher",
"Silky Pocket Mouse"),
"Rodents",
ifelse(
Den.Species %in%
c("Side-Blotched Lizard",
"Gopher Snake",
"Side Blotched Lizard",
"Spadefoot Toad"),
"Herptiles (excl. CTS)",
ifelse(
Den.Species %in%
c("Tarantula",
"Black Widow"),
"Arachnids",
ifelse(
Den.Species %in%
"Burrowing Owl",
"Birds",
"None"))))))
cts_table %>% count(SppGroups, sort = TRUE)
cts_table %>% count(Diameter.Largest.Entrance..in. , sort = TRUE)
cts_table %>% count(Depth.at.Deepest.Point...ft. , sort = TRUE)
cts_table %>% count(Total.Burrow.Length..ft. , sort = TRUE)
cts_table %<>%
mutate(
Depth.at.Deepest.Point...ft. =
ifelse(
Depth.at.Deepest.Point...ft. == "..42",
".42",
Depth.at.Deepest.Point...ft.
),
Diameter.Largest.Entrance..in. =
ifelse(
Diameter.Largest.Entrance..in. == "1 in ",
"1",
Diameter.Largest.Entrance..in.
)
) #Get rid of values that cant be cast as numeric
cts_table_Complete <- cts_table %>%
filter(
Depth.at.Deepest.Point...ft. != ""
& Depth.at.Deepest.Point...ft. != 0
& Diameter.Largest.Entrance..in. != ""
& Diameter.Largest.Entrance..in.!= 0
& Total.Burrow.Length..ft. != ""
& Total.Burrow.Length..ft. != 0
) %>%
mutate(
Depth.at.Deepest.Point...ft. = as.numeric(Depth.at.Deepest.Point...ft.),
Diameter.Largest.Entrance..in. = as.numeric(Diameter.Largest.Entrance..in.),
Total.Burrow.Length..ft. = as.numeric(Total.Burrow.Length..ft.)
)
cts_table_Complete %>% count(Diameter.Largest.Entrance..in. , sort = TRUE)
cts_table_Complete %>% count(Depth.at.Deepest.Point...ft. , sort = TRUE)
cts_table_Complete %>% count(Total.Burrow.Length..ft. , sort = TRUE)
cts_table_Complete %<>%
mutate(Den.Volume.in3 =
round(  pi * ((Diameter.Largest.Entrance..in. /2)^2) * (Depth.at.Deepest.Point...ft. * 12), digits =  2 ),
Den.Volume.ft3 =
pi * ((Diameter.Largest.Entrance..in./ (12 *2))^2) * (Depth.at.Deepest.Point...ft.)
)
summary(cts_table_Complete$Den.Volume.ft3)
summary(cts_table_Complete$Den.Volume.in3)
cts_table_Complete$SppGroups <-
factor(cts_table_Complete$SppGroups,
levels = c("None",
"Arachnids",
"Herptiles (excl. CTS)",
"Kangaroo Rat",
"Rodents"),
ordered = TRUE) #reorder so "None" is first
vol_gg <- ggplot(cts_table_Complete, aes(x = SppGroups, y = Den.Volume.in3, fill = SppGroups)) +
labs(y = "Den Volume (Cubic Inches)", x = "Species")
vol_gg_box <- vol_gg +
scale_y_continuous(limits = c(0, 100)) +
geom_boxplot(alpha = 0.7) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 30,
vjust = 0.5,
size = 12))
vol_gg_bar <- ggplot(cts_table_Complete, aes(x = Den.Volume.in3,
fill = SppGroups)) +
scale_x_continuous(limits = c(0,200)) +
geom_histogram(stat = 'bin', alpha = 0.8, binwidth = 10) +
theme(legend.position = "left") +
labs(fill = "Species Group",
x = "Den Volume (Cubic Inches)",
y = "Number of Observations")
vol_gg_dense <- ggplot(cts_table_Complete,
aes(x = Den.Volume.in3,
color = SppGroups,
fill = SppGroups),
alpha = 0.2) +
scale_x_continuous(limits = c(0, 200)) +
theme(legend.position = "left") +
labs(color = "Species Group",
x = "Den Volume (Cubic Inches)",
y = "Density of Observations") +
geom_density(alpha = 0.2,
size = 1.5,) +
theme(legend.position = "none")
vol_gg_vio <- vol_gg +
scale_y_continuous(limits = c(0, 200)) +
geom_violin(alpha = 0.7) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 30,
vjust = 0.5,
size = 12))
grid.arrange(vol_gg_bar, vol_gg_dense, vol_gg_box,vol_gg_vio,  ncol=2)
denEntranceData <- cts_table_Complete %>%
select(Den.Entrances,
SppGroups,
Depth.at.Deepest.Point...ft.,
Diameter.Largest.Entrance..in.,
Den.Volume.in3) %>%
mutate(Den.Entrances = as.numeric(Den.Entrances)) %>%
filter( !is.na(Den.Entrances)
& Den.Entrances != "0") %>%
mutate(Den.Entrances = as.numeric(Den.Entrances))
num_ent_plot <- ggplot(denEntranceData, aes(x = Den.Entrances,
fill = SppGroups,)) +
labs(fill = "Species Group",
x = "Number of Den Entrances",
y = "Number of Observations") +
geom_bar(alpha = 0.7) +
theme(axis.title = element_text(size = 13))
denEntrance_ggridge <- ggplot(denEntranceData,
aes(x = Den.Entrances,
y = SppGroups,
fill = SppGroups,
color = SppGroups)) +
labs(fill = "Species Group",
x = "Number of Den Entrances",
y = "Density of Observations") +
geom_density_ridges2(alpha = 0.7, size = 1.5) +
scale_x_binned(breaks = 1:8) +
theme(legend.position = "none",
axis.title = element_text(size = 13))
# denEntrance_ggridge
# num_ent_plot
grid.arrange(denEntrance_ggridge, num_ent_plot,  ncol=1)
crdref <- "+proj=utm +zone=10 +ellps=WGS84 +datum=WGS84 +units=m +no_defs" #proj4 info for UTM Zone 10
Den_Locations <- vect(cbind(cts_table_Complete$X_UTMZ10,
cts_table_Complete$Y_UTMZ10),
atts = cts_table_Complete,
crs = crdref) #create a SpatVector object of the points
sf_Den_loc <- sf::st_as_sf(Den_Locations)
colnames(sf_Den_loc)[c(4:7,29,32:34)] <- c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)",
"Den Volume (cubic ft)")
sf_Den_loc %<>% select(`Species Found`,
`Species Group`,
`Number of Entrances`,
`Largest Entrance Diameter (in)`,
`Depth at Deepest Point (ft)`,
`Total Lenght (ft)`,
`Den Volume (cubic in)`,
Notes)
colPal <- colorFactor(palette = c("#000000", brewer.pal(4,"Set1")),
levels = sf_Den_loc$`Species Group`)
#create sf object compatible with mapview
webmapCTS <- mapview(sf_Den_loc,
zcol = "Species Group",
map.type = "Esri.WorldImagery",
layer.name = "Species Group",
col.regions = c("#FDE725FF", "#5DC863FF", "#21908CFF", "#FF000000", "#440154FF"),
popup = popupTable(
x = sf_Den_loc,
zcol = c("Number of Entrances",
"Largest Entrance Diameter (in)",
"Depth at Deepest Point (ft)",
"Total Lenght (ft)",
"Species Found",
"Species Group",
"Den Volume (cubic in)"),
feature.id = FALSE,
row.numbers = FALSE))
webmapCTS
#mapshot(webmapCTS, url = "~/R/AlthouseAndMeade/CTS_Data/WebMap/CTSmap.html")
raster_ndmis_paths <- c("C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2A2A_20210126_070_LagunaLake_NDMI_10.tif",
"C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2B2A_20210210_070_LagunaLake_NDMI_10.tif",
"C:\\Users\\samer\\AppData\\Local\\Temp\\RTMPGT~1\\SEN2R_~3/NDMI/S2A2A_20210225_070_LagunaLake_NDMI_10.tif")
rast1 <- raster(raster_ndmis_paths[1]) #create a raster object from one path
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
?gsub
daterange <- gsub("-", paste0(timeframe_begin,timeframe_end), replacement = "")
daterange
daterange <- gsub(pattern = "-",
paste(timeframe_begin,
timeframe_end,
sep = "_"),
replacement = "")
daterange
filename <- paste0("LagunaMoistureCumm_", daterange)
filename
library(terra)
library(raster)
?raster::writeRaster
writeFormats()
writeFormats()[24]
cumm_moisture_func <- function(path_list){
#' read in all rasters in a list
#' convert them to SpatRaster objects
#' Append them to a list
#' Return SpatRaster list
raster_vect <- c()
for (path in path_list){
i_rast <- rast(path)
raster_vect <- append(raster_vect, (i_rast))
}
return(raster_vect)
}
cummulative_moisture <- raster(sum(cumm_moisture_func(c(raster_ndmis_paths)), na.rm = TRUE)) #Raster algebra - add all rasters together
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons()
sci_user <- "gisaltmeade"
sci_pass <- "sprung-slogan-elevating"
write_scihub_login(sci_user, sci_pass)
timeframe_begin <- "2021-1-1" #change these dates to change the image download timeframe
timeframe_end <- "2022-1-1"
dir.create("temp")
tempDir <- paste0(getwd(), "/temp")
out_dir  <- tempfile(pattern = "sen2r_out_1_", tmpdir = tempDir) # output folder
safe_dir <- tempfile(pattern = "sen2r_safe_", tmpdir = tempDir)  # folder to store downloaded SAFE
out_paths <- sen2r(
gui = FALSE,
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
proj = webmercProj,
overwrite = TRUE
)
crs(Laguna_Ext)
crs(read_sf(Laguna_file_name))
out_paths <- sen2r(
gui = FALSE,
extent = Laguna_file_name,
extent_name = "LagunaLake",
timewindow = c(as.Date(timeframe_begin), as.Date(timeframe_end)),
list_indices = c("NDMI"),
max_cloud_safe = 100,
mask_type = "cloud_and_shadow",
max_mask = 10, #very low threshold, we dont want to sum up partial values
path_l2a = safe_dir,
path_out = out_dir,
server = c("gcloud", "scihub"),
parallel = 4,
overwrite = TRUE
)
install.packages(c("sen2r","terra","leaflet","sf","raster","RColorBrewer"))
library(terra)
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
