{"frames":[{"func":"sen2r(gui = FALSE, downloader = \"aria2\", extent = Laguna_file_name, \n    extent_name = \"LagunaLake\", timewindow = c(as.Date(timeframe_begin), \n        as.Date(timeframe_end)), list_indices = c(\"NDMI\"), rm_safe = TRUE, \n    max_cloud_safe = 100, mask_type = \"cloud_and_shadow\", max_mask = 10,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".sen2r(param_list = param_list, pm_arg_passed = pm_arg_passed, \n    gui = gui, preprocess = preprocess, s2_levels = s2_levels, \n    sel_sensor = sel_sensor, online = online, server = server, \n    order_lta = order_lta, apihub = apihub, downloader = downloader,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"s2_list(spatial_extent = pm$extent, time_interval = pm$timewindow, \n    time_period = pm$timeperiod, tile = if (any(length(nn(pm$s2tiles_selected)) == \n        0, all(is.na(pm$s2tiles_selected)))) {\n        tiles_intersects(pm$extent) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".s2_list_scihub(spatial_extent = spatial_extent, time_intervals = time_intervals, \n    tile = tile, orbit = orbit, max_cloud = max_cloud, apihub = apihub, \n    service = service, availability = availability, .s2tiles = s2tiles)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"check_scihub_login(creds[1, 1], creds[1, 2])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"RETRY(verb = \"GET\", url = paste0(\"https://\", ifelse(service == \n    \"dhus\", \"scihub\", \"apihub\"), \".copernicus.eu/\", service, \n    \"/odata/v1\"), handle = handle(\"\"), config = authenticate(username, \n    password))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(request_perform(req, hu$handle$handle), error = function(e) e)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"doTryCatch(return(expr), name, parentenv, handler)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"request_perform(req, hu$handle$handle)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"request_fetch(req$output, req$url, handle)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"request_fetch.write_memory(req$output, req$url, handle)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"curl::curl_fetch_memory(url, handle = handle)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"no loop for break/next, jumping to top level"}